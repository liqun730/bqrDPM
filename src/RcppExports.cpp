// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bqrALD
List bqrALD(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, double sigma, int burn);
RcppExport SEXP _bqrDPM_bqrALD(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP sigmaSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrALD(Xr, Yr, p, nsim, initCoef, sigma, burn));
    return rcpp_result_gen;
END_RCPP
}
// bqrDE
List bqrDE(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, int burn);
RcppExport SEXP _bqrDPM_bqrDE(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrDE(Xr, Yr, p, nsim, initCoef, burn));
    return rcpp_result_gen;
END_RCPP
}
// bqrDPML
List bqrDPML(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, bool sampleQ, int burn, bool plotDensity, int naux, double threshold);
RcppExport SEXP _bqrDPM_bqrDPML(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP sampleQSEXP, SEXP burnSEXP, SEXP plotDensitySEXP, SEXP nauxSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< bool >::type sampleQ(sampleQSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type plotDensity(plotDensitySEXP);
    Rcpp::traits::input_parameter< int >::type naux(nauxSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrDPML(Xr, Yr, p, nsim, initCoef, sampleQ, burn, plotDensity, naux, threshold));
    return rcpp_result_gen;
END_RCPP
}
// bqrDPMLH
List bqrDPMLH(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, bool sampleQ, int burn, bool plotDensity, int naux, double threshold, bool hasHeter);
RcppExport SEXP _bqrDPM_bqrDPMLH(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP sampleQSEXP, SEXP burnSEXP, SEXP plotDensitySEXP, SEXP nauxSEXP, SEXP thresholdSEXP, SEXP hasHeterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< bool >::type sampleQ(sampleQSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type plotDensity(plotDensitySEXP);
    Rcpp::traits::input_parameter< int >::type naux(nauxSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type hasHeter(hasHeterSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrDPMLH(Xr, Yr, p, nsim, initCoef, sampleQ, burn, plotDensity, naux, threshold, hasHeter));
    return rcpp_result_gen;
END_RCPP
}
// bqrDPMLHA
List bqrDPMLHA(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, bool sampleQ, int burn, bool plotDensity, int nF, double threshold, bool hasHeter);
RcppExport SEXP _bqrDPM_bqrDPMLHA(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP sampleQSEXP, SEXP burnSEXP, SEXP plotDensitySEXP, SEXP nFSEXP, SEXP thresholdSEXP, SEXP hasHeterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< bool >::type sampleQ(sampleQSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type plotDensity(plotDensitySEXP);
    Rcpp::traits::input_parameter< int >::type nF(nFSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type hasHeter(hasHeterSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrDPMLHA(Xr, Yr, p, nsim, initCoef, sampleQ, burn, plotDensity, nF, threshold, hasHeter));
    return rcpp_result_gen;
END_RCPP
}
// bqrDPMMNA
List bqrDPMMNA(NumericMatrix Xr, NumericVector Yr, double tau, int nsim, NumericVector initCoef, int burn, bool plotDensity, int nF, double aD, double bD, double maxSigma, double precBeta);
RcppExport SEXP _bqrDPM_bqrDPMMNA(SEXP XrSEXP, SEXP YrSEXP, SEXP tauSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP burnSEXP, SEXP plotDensitySEXP, SEXP nFSEXP, SEXP aDSEXP, SEXP bDSEXP, SEXP maxSigmaSEXP, SEXP precBetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type plotDensity(plotDensitySEXP);
    Rcpp::traits::input_parameter< int >::type nF(nFSEXP);
    Rcpp::traits::input_parameter< double >::type aD(aDSEXP);
    Rcpp::traits::input_parameter< double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< double >::type maxSigma(maxSigmaSEXP);
    Rcpp::traits::input_parameter< double >::type precBeta(precBetaSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrDPMMNA(Xr, Yr, tau, nsim, initCoef, burn, plotDensity, nF, aD, bD, maxSigma, precBeta));
    return rcpp_result_gen;
END_RCPP
}
// bqrDPMMNHA
List bqrDPMMNHA(NumericMatrix Xr, NumericVector Yr, double tau, int nsim, NumericVector initCoef, int burn, bool plotDensity, int nF, double aD, double bD, double maxSigma, double precBeta, bool hasHeter);
RcppExport SEXP _bqrDPM_bqrDPMMNHA(SEXP XrSEXP, SEXP YrSEXP, SEXP tauSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP burnSEXP, SEXP plotDensitySEXP, SEXP nFSEXP, SEXP aDSEXP, SEXP bDSEXP, SEXP maxSigmaSEXP, SEXP precBetaSEXP, SEXP hasHeterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type plotDensity(plotDensitySEXP);
    Rcpp::traits::input_parameter< int >::type nF(nFSEXP);
    Rcpp::traits::input_parameter< double >::type aD(aDSEXP);
    Rcpp::traits::input_parameter< double >::type bD(bDSEXP);
    Rcpp::traits::input_parameter< double >::type maxSigma(maxSigmaSEXP);
    Rcpp::traits::input_parameter< double >::type precBeta(precBetaSEXP);
    Rcpp::traits::input_parameter< bool >::type hasHeter(hasHeterSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrDPMMNHA(Xr, Yr, tau, nsim, initCoef, burn, plotDensity, nF, aD, bD, maxSigma, precBeta, hasHeter));
    return rcpp_result_gen;
END_RCPP
}
// calcQNormalMixMN
double calcQNormalMixMN(NumericVector prob, NumericVector sigma2Star, NumericVector muStar, double p, int n);
RcppExport SEXP _bqrDPM_calcQNormalMixMN(SEXP probSEXP, SEXP sigma2StarSEXP, SEXP muStarSEXP, SEXP pSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma2Star(sigma2StarSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type muStar(muStarSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(calcQNormalMixMN(prob, sigma2Star, muStar, p, n));
    return rcpp_result_gen;
END_RCPP
}
// bqrDPMN
List bqrDPMN(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, bool sampleQ, int burn, bool plotDensity);
RcppExport SEXP _bqrDPM_bqrDPMN(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP sampleQSEXP, SEXP burnSEXP, SEXP plotDensitySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< bool >::type sampleQ(sampleQSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type plotDensity(plotDensitySEXP);
    rcpp_result_gen = Rcpp::wrap(bqrDPMN(Xr, Yr, p, nsim, initCoef, sampleQ, burn, plotDensity));
    return rcpp_result_gen;
END_RCPP
}
// bqrDPMNH
List bqrDPMNH(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, bool sampleQ, int burn, bool plotDensity, bool hasHeter);
RcppExport SEXP _bqrDPM_bqrDPMNH(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP sampleQSEXP, SEXP burnSEXP, SEXP plotDensitySEXP, SEXP hasHeterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< bool >::type sampleQ(sampleQSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type plotDensity(plotDensitySEXP);
    Rcpp::traits::input_parameter< bool >::type hasHeter(hasHeterSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrDPMNH(Xr, Yr, p, nsim, initCoef, sampleQ, burn, plotDensity, hasHeter));
    return rcpp_result_gen;
END_RCPP
}
// bqrDPMNHP
List bqrDPMNHP(NumericMatrix Xr, NumericVector Yr, int T, double p, int nsim, NumericVector initCoef, int burn, bool plotDensity, bool hasHeter);
RcppExport SEXP _bqrDPM_bqrDPMNHP(SEXP XrSEXP, SEXP YrSEXP, SEXP TSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP burnSEXP, SEXP plotDensitySEXP, SEXP hasHeterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type plotDensity(plotDensitySEXP);
    Rcpp::traits::input_parameter< bool >::type hasHeter(hasHeterSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrDPMNHP(Xr, Yr, T, p, nsim, initCoef, burn, plotDensity, hasHeter));
    return rcpp_result_gen;
END_RCPP
}
// bqrDPMU
List bqrDPMU(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, int burn, bool plotDensity, double tol);
RcppExport SEXP _bqrDPM_bqrDPMU(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP burnSEXP, SEXP plotDensitySEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type plotDensity(plotDensitySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrDPMU(Xr, Yr, p, nsim, initCoef, burn, plotDensity, tol));
    return rcpp_result_gen;
END_RCPP
}
// bqrDPMUH
List bqrDPMUH(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, int burn, bool plotDensity, double tol, bool hasHeter);
RcppExport SEXP _bqrDPM_bqrDPMUH(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP burnSEXP, SEXP plotDensitySEXP, SEXP tolSEXP, SEXP hasHeterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< bool >::type plotDensity(plotDensitySEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type hasHeter(hasHeterSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrDPMUH(Xr, Yr, p, nsim, initCoef, burn, plotDensity, tol, hasHeter));
    return rcpp_result_gen;
END_RCPP
}
// bqrN
List bqrN(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, int burn);
RcppExport SEXP _bqrDPM_bqrN(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrN(Xr, Yr, p, nsim, initCoef, burn));
    return rcpp_result_gen;
END_RCPP
}
// bqrNH
List bqrNH(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, int burn);
RcppExport SEXP _bqrDPM_bqrNH(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrNH(Xr, Yr, p, nsim, initCoef, burn));
    return rcpp_result_gen;
END_RCPP
}
// bqrNM
List bqrNM(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, NumericVector weight, NumericVector mu, NumericVector sigma, int burn);
RcppExport SEXP _bqrDPM_bqrNM(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP weightSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weight(weightSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrNM(Xr, Yr, p, nsim, initCoef, weight, mu, sigma, burn));
    return rcpp_result_gen;
END_RCPP
}
// bqrT3
List bqrT3(NumericMatrix Xr, NumericVector Yr, double p, int nsim, NumericVector initCoef, int burn);
RcppExport SEXP _bqrDPM_bqrT3(SEXP XrSEXP, SEXP YrSEXP, SEXP pSEXP, SEXP nsimSEXP, SEXP initCoefSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Yr(YrSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type initCoef(initCoefSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(bqrT3(Xr, Yr, p, nsim, initCoef, burn));
    return rcpp_result_gen;
END_RCPP
}
// checkLoss
double checkLoss(NumericVector y, NumericVector yHat, double tau);
RcppExport SEXP _bqrDPM_checkLoss(SEXP ySEXP, SEXP yHatSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type yHat(yHatSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(checkLoss(y, yHat, tau));
    return rcpp_result_gen;
END_RCPP
}
// sampleQuantile
double sampleQuantile(NumericVector array, double p);
RcppExport SEXP _bqrDPM_sampleQuantile(SEXP arraySEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type array(arraySEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(sampleQuantile(array, p));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bqrDPM_bqrALD", (DL_FUNC) &_bqrDPM_bqrALD, 7},
    {"_bqrDPM_bqrDE", (DL_FUNC) &_bqrDPM_bqrDE, 6},
    {"_bqrDPM_bqrDPML", (DL_FUNC) &_bqrDPM_bqrDPML, 10},
    {"_bqrDPM_bqrDPMLH", (DL_FUNC) &_bqrDPM_bqrDPMLH, 11},
    {"_bqrDPM_bqrDPMLHA", (DL_FUNC) &_bqrDPM_bqrDPMLHA, 11},
    {"_bqrDPM_bqrDPMMNA", (DL_FUNC) &_bqrDPM_bqrDPMMNA, 12},
    {"_bqrDPM_bqrDPMMNHA", (DL_FUNC) &_bqrDPM_bqrDPMMNHA, 13},
    {"_bqrDPM_calcQNormalMixMN", (DL_FUNC) &_bqrDPM_calcQNormalMixMN, 5},
    {"_bqrDPM_bqrDPMN", (DL_FUNC) &_bqrDPM_bqrDPMN, 8},
    {"_bqrDPM_bqrDPMNH", (DL_FUNC) &_bqrDPM_bqrDPMNH, 9},
    {"_bqrDPM_bqrDPMNHP", (DL_FUNC) &_bqrDPM_bqrDPMNHP, 9},
    {"_bqrDPM_bqrDPMU", (DL_FUNC) &_bqrDPM_bqrDPMU, 8},
    {"_bqrDPM_bqrDPMUH", (DL_FUNC) &_bqrDPM_bqrDPMUH, 9},
    {"_bqrDPM_bqrN", (DL_FUNC) &_bqrDPM_bqrN, 6},
    {"_bqrDPM_bqrNH", (DL_FUNC) &_bqrDPM_bqrNH, 6},
    {"_bqrDPM_bqrNM", (DL_FUNC) &_bqrDPM_bqrNM, 9},
    {"_bqrDPM_bqrT3", (DL_FUNC) &_bqrDPM_bqrT3, 6},
    {"_bqrDPM_checkLoss", (DL_FUNC) &_bqrDPM_checkLoss, 3},
    {"_bqrDPM_sampleQuantile", (DL_FUNC) &_bqrDPM_sampleQuantile, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_bqrDPM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
